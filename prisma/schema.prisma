generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Category {
  id String @id @default(uuid())
  name String @unique
  courses Course[]
}

model Course {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  published Boolean @default(false)
  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])
  attachments Attachments[]
  chapters Chapter[]
  purchases Purchase[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Attachments {
  id String @id @default(uuid())
  name String
  url String @db.Text
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)
  muxData MuxData?
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  studentProgress StudentProgress[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id String @id @default(uuid())
  chapterId String @unique
  assetId String
  playbackId String?
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model StudentProgress {
  id String @id @default(uuid())
  userId String
  chapterId String
  isCompleted Boolean @default(false)
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id String @id @default(uuid())
  userId String
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}